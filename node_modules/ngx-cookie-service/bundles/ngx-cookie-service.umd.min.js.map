{"version":3,"file":"ngx-cookie-service.umd.min.js","sources":["~/ngx-cookie-service/lib/cookie-service/cookie.service.ts"],"sourcesContent":["// This service is based on the `ng2-cookies` package which sadly is not a service and does\n// not use `DOCUMENT` injection and therefore doesn't work well with AoT production builds.\n// Package: https://github.com/BCJTI/ng2-cookies\n\nimport { Injectable, Inject, PLATFORM_ID, InjectionToken } from '@angular/core';\nimport { DOCUMENT, isPlatformBrowser } from '@angular/common';\n\n@Injectable()\nexport class CookieService {\n  private readonly documentIsAccessible: boolean;\n\n  constructor(\n    // The type `Document` may not be used here. Although a fix is on its way,\n    // we will go with `any` for now to support Angular 2.4.x projects.\n    // Issue: https://github.com/angular/angular/issues/12631\n    // Fix: https://github.com/angular/angular/pull/14894\n    @Inject( DOCUMENT ) private document: any,\n    // Get the `PLATFORM_ID` so we can check if we're in a browser.\n    @Inject( PLATFORM_ID ) private platformId: InjectionToken<Object>,\n  ) {\n    this.documentIsAccessible = isPlatformBrowser( this.platformId );\n  }\n\n  /**\n   * @param name Cookie name\n   * @returns {boolean}\n   */\n  check( name: string ): boolean {\n    if ( !this.documentIsAccessible ) {\n      return false;\n    }\n\n    name = encodeURIComponent( name );\n\n    const regExp: RegExp = this.getCookieRegExp( name );\n    const exists: boolean = regExp.test( this.document.cookie );\n\n    return exists;\n  }\n\n  /**\n   * @param name Cookie name\n   * @returns {any}\n   */\n  get( name: string ): string {\n    if ( this.documentIsAccessible && this.check( name ) ) {\n      name = encodeURIComponent( name );\n\n      const regExp: RegExp = this.getCookieRegExp( name );\n      const result: RegExpExecArray = regExp.exec( this.document.cookie );\n\n      return decodeURIComponent( result[ 1 ] );\n    } else {\n      return '';\n    }\n  }\n\n  /**\n   * @returns {}\n   */\n  getAll(): {} {\n    if ( !this.documentIsAccessible ) {\n      return {};\n    }\n\n    const cookies: {} = {};\n    const document: any = this.document;\n\n    if ( document.cookie && document.cookie !== '' ) {\n      const split: Array<string> = document.cookie.split(';');\n\n      for ( let i = 0; i < split.length; i += 1 ) {\n        const currentCookie: Array<string> = split[ i ].split('=');\n\n        currentCookie[ 0 ] = currentCookie[ 0 ].replace( /^ /, '' );\n        cookies[ decodeURIComponent( currentCookie[ 0 ] ) ] = decodeURIComponent( currentCookie[ 1 ] );\n      }\n    }\n\n    return cookies;\n  }\n\n  /**\n   * @param name     Cookie name\n   * @param value    Cookie value\n   * @param expires  Number of days until the cookies expires or an actual `Date`\n   * @param path     Cookie path\n   * @param domain   Cookie domain\n   * @param secure   Secure flag\n   * @param sameSite OWASP samesite token `Lax` or `Strict`\n   */\n  set(\n    name: string,\n    value: string,\n    expires?: number | Date,\n    path?: string,\n    domain?: string,\n    secure?: boolean,\n    sameSite?: 'Lax' | 'Strict'\n  ): void {\n    if ( !this.documentIsAccessible ) {\n      return;\n    }\n\n    let cookieString: string = encodeURIComponent( name ) + '=' + encodeURIComponent( value ) + ';';\n\n    if ( expires ) {\n      if ( typeof expires === 'number' ) {\n        const dateExpires: Date = new Date( new Date().getTime() + expires * 1000 * 60 * 60 * 24 );\n\n        cookieString += 'expires=' + dateExpires.toUTCString() + ';';\n      } else {\n        cookieString += 'expires=' + expires.toUTCString() + ';';\n      }\n    }\n\n    if ( path ) {\n      cookieString += 'path=' + path + ';';\n    }\n\n    if ( domain ) {\n      cookieString += 'domain=' + domain + ';';\n    }\n\n    if ( secure ) {\n      cookieString += 'secure;';\n    }\n\n    if ( sameSite ) {\n      cookieString += 'sameSite=' + sameSite + ';';\n    }\n\n    this.document.cookie = cookieString;\n  }\n\n  /**\n   * @param name   Cookie name\n   * @param path   Cookie path\n   * @param domain Cookie domain\n   */\n  delete( name: string, path?: string, domain?: string ): void {\n    if ( !this.documentIsAccessible ) {\n      return;\n    }\n\n    this.set( name, '', new Date('Thu, 01 Jan 1970 00:00:01 GMT'), path, domain );\n  }\n\n  /**\n   * @param path   Cookie path\n   * @param domain Cookie domain\n   */\n  deleteAll( path?: string, domain?: string ): void {\n    if ( !this.documentIsAccessible ) {\n      return;\n    }\n\n    const cookies: any = this.getAll();\n\n    for ( const cookieName in cookies ) {\n      if ( cookies.hasOwnProperty( cookieName ) ) {\n        this.delete( cookieName, path, domain );\n      }\n    }\n  }\n\n  /**\n   * @param name Cookie name\n   * @returns {RegExp}\n   */\n  private getCookieRegExp( name: string ): RegExp {\n    const escapedName: string = name.replace( /([\\[\\]\\{\\}\\(\\)\\|\\=\\;\\+\\?\\,\\.\\*\\^\\$])/ig, '\\\\$1' );\n\n    return new RegExp( '(?:^' + escapedName + '|;\\\\s*' + escapedName + ')=(.*?)(?:;|$)', 'g' );\n  }\n}\n"],"names":["CookieService","prototype","check","name","this","documentIsAccessible","encodeURIComponent","getCookieRegExp","test","document","cookie","get","result","exec","decodeURIComponent","getAll","cookies","split","i","length","currentCookie","replace","set","value","expires","path","domain","secure","sameSite","cookieString","Date","getTime","toUTCString","delete","deleteAll","cookieName","hasOwnProperty","escapedName","RegExp","platformId","isPlatformBrowser","decorators","type","Injectable","ctorParameters","undefined","Inject","args","DOCUMENT","InjectionToken","PLATFORM_ID"],"mappings":"wTAKA,IAAAA,GAkBAA,EAAAC,UAAAC,MAAA,SAIGC,GAHC,QAIKC,KAAMC,uBAAXF,EAIOG,mBAAoBH,GAEJC,KAAKG,gBAAiBJ,GACdK,KAAMJ,KAAKK,SAASC,UAIvDV,EAAAC,UAAAU,IAAA,SAKGR,GAJC,GAKKC,KAAKC,sBAAwBD,KAAKF,MAAOC,GAAS,CAJrDA,EAKOG,mBAAoBH,GAH3B,IAMMS,EADiBR,KAAKG,gBAAiBJ,GACNU,KAAMT,KAAKK,SAASC,QAH3D,OAKOI,mBAAoBF,EAAQ,IAHnC,MAKO,IACbZ,EAAAC,UAAAc,OAAA,WACI,IAMKX,KAAMC,qBALT,MAMO,GAHT,IAMMW,EAAc,GACdP,EAAgBL,KAAKK,SAJ3B,GAMKA,EAASC,QAA8B,KAApBD,EAASC,OAH/B,IAFA,IAMMO,EAAuBR,EAASC,OAAOO,MAAM,KAEzCC,EAAI,EAAGA,EAAID,EAAME,OAAQD,GAAK,EAAI,CAL1C,IAMME,EAA+BH,EAAOC,GAAID,MAAM,KAJtDG,EAMe,GAAMA,EAAe,GAAIC,QAAS,KAAM,IALvDL,EAMSF,mBAAoBM,EAAe,KAAUN,mBAAoBM,EAAe,IAF7F,OAMOJ,GAMXhB,EAAAC,UAAAqB,IAAA,SACInB,EACAoB,EACAC,EACAC,EACAC,EACAC,EACAC,GAEA,GAMKxB,KAAMC,qBANX,CAIA,IAMIwB,EAAuBvB,mBAAoBH,GAAS,IAAMG,mBAAoBiB,GAAU,IAEvFC,IAFDK,GAGsB,iBAAZL,EAGM,WAFU,IAAIM,MAAM,IAAIA,MAAOC,UAAsB,IAAVP,EAAiB,GAAK,GAAK,IAE7CQ,cAAgB,IAEzC,WAAaR,EAAQQ,cAAgB,KAIpDP,IALHI,GAMgB,QAAUJ,EAAO,KAG9BC,IALHG,GAMgB,UAAYH,EAAS,KAGlCC,IALHE,GAMgB,WAGbD,IALHC,GAMgB,YAAcD,EAAW,KAH3CxB,KAMKK,SAASC,OAASmB,IAE3B7B,EAAAC,UAAAgC,UAAA,SAMG9B,EAAAsB,EAAAC,GACMtB,KAAMC,sBAFXD,KAMKkB,IAAKnB,EAAM,GAAI,IAAI2B,KAAK,iCAAkCL,EAAMC,IACzE1B,EAAAC,UAAAiC,UAAA,SAMGT,EAAAC,GALC,GAMKtB,KAAMC,qBANX,CAIA,IAMMW,EAAeZ,KAAKW,SAJ1B,IAMM,IAAMoB,KAAcnB,EACnBA,EAAQoB,eAAgBD,IAL3B/B,KAMK6B,UAAQE,EAAYV,EAAMC,KASpC1B,EAAHC,UAAAM,gBAAG,SAAAJ,GANC,IAOMkC,EAAsBlC,EAAKkB,QAAS,yCAA0C,QALpF,OAOO,IAAIiB,OAAQ,OAASD,EAAc,SAAWA,EAAc,iBAAkB,SAhKzF,SAAArC,EAGaS,EAEA8B,GAFAnC,KAAbK,SAAaA,EAEAL,KAAbmC,WAAaA,EADTnC,KAAKC,qBAAuBmC,EAAAA,kBAAmBpC,KAAKmC,YA8JjDvC,EAAPyC,WAA2C,CAN3C,CAOEC,KAAMC,EAAAA,aAGP3C,EAAD4C,eAAC,WAAA,MAAA,CAJD,CAACF,KAAMG,UAAWJ,WAAY,CAAC,CAAEC,KAAMI,EAAAA,OAAQC,KAAM,CAACC,EAAAA,aACtD,CAACN,KAAMO,EAAAA,eAAgBR,WAAY,CAAC,CAAEC,KAAMI,EAAAA,OAAQC,KAAM,CAACG,EAAAA"}
