package com.comp354project.Comp354Project.controller;


import com.comp354project.Comp354Project.Entities.*;
import com.comp354project.Comp354Project.repository.AccountRepository;
import com.comp354project.Comp354Project.repository.DemoRepository;
import com.comp354project.Comp354Project.repository.RightsRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

@CrossOrigin(origins="http://localhost:4200")
@RestController    // This means that this class is a Controller
@RequestMapping(path="/demo") // This means URL's start with /demo (after Application path)
public class DemoController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private DemoRepository demoRepository;

    @Autowired
    private RightsRepository rightsRepository;

    @Autowired
    private AccountRepository accountRepository;

    @GetMapping(path="/add") // Map ONLY Get Requests
    public @ResponseBody String addNewUser (@RequestParam String name
            , @RequestParam String email) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        Demo n = new Demo();
        n.setName(name);
        n.setEmail(email);
        demoRepository.save(n);


        Category c = new Category();
        return "Saved";
    }

    @GetMapping(path="/instantiateRightsAndAccounts")
    public @ResponseBody String instantiateRights()
    {
        Rights buying = new Rights();
        buying.setId(1);
        buying.setName("Buying");

        Rights selling = new Rights();
        selling.setId(2);
        selling.setName("Selling");

        Rights admin = new Rights();
        admin.setId(3);
        admin.setName("Admin");

        Rights superAdmin = new Rights();
        superAdmin.setId(4);
        superAdmin.setName("SuperAdmin");

        rightsRepository.save(buying);
        rightsRepository.save(selling);
        rightsRepository.save(admin);
        rightsRepository.save(superAdmin);

        List<Rights> rights = new ArrayList<>();
        rights.add(buying);
        rights.add(selling);
        rights.add(admin);
        rights.add(superAdmin);

        List<Account> adminAcc = accountRepository.findByEmail("admin@admin.com");
        if(adminAcc.isEmpty()) {
            Account acc = new Account();
            acc.setId(1);
            acc.setName("superadmin");
            acc.setEmail("admin@admin.com");
            acc.setPassword("pwdHash"); //need to change
            acc.setSalt("pwdSalt"); //need to change
            acc.setAddress1(" ");
            acc.setCity(" ");
            acc.setPhone(" ");
            acc.setCountry(" ");
            acc.setPostalCode(" ");
            acc.setProvince(" ");
            acc.setDatejoined(new Date(0));
            acc.setRights(rights);

            accountRepository.save(acc);
        }

        return "done";
    }

    @GetMapping(path="/all")
    public @ResponseBody Iterable<Demo> getAllUsers() {
        // This returns a JSON or XML with the users
        return demoRepository.findAll();
    }
}